<#
  .SYNOPSIS
  Exports the current set of Conditional Access policies to an Azure storage account.

  .DESCRIPTION
  Exports the current set of Conditional Access policies to an Azure storage account.

  .PARAMETER ContainerName
  Will be autogenerated if left empty

  .PARAMETER ResourceGroupName
  Will be read from central config if left empty

  .PARAMETER StorageAccountName
  Will be read from central config if left empty

  .PARAMETER StorageAccountLocation
  Will be read from central config if left empty

  .PARAMETER StorageAccountSku
  Will be read from central config if left empty

  .NOTES
  Permissions
   MS Graph (API): 
   - Policy.Read.All
   Azure IaaS: Access to the given Azure Storage Account / Resource Group

#>

#Requires -Module @{ModuleName = "RealmJoin.RunbookHelper"; ModuleVersion = "0.5.2" }, Az.Storage

param(
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "CaPolicies.Container" } )]
    [string] $ContainerName,
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "CaPolicies.ResourceGroup" } )]
    [string] $ResourceGroupName,
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "CaPolicies.StorageAccount.Name" } )]
    [string] $StorageAccountName,
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "CaPolicies.StorageAccount.Location" } )]
    [string] $StorageAccountLocation,
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "CaPolicies.StorageAccount.Sku" } )]
    [string] $StorageAccountSku
)

try {
    Connect-RjRbGraph
    Connect-RjRbAzAccount

    if (-not $ContainerName) {
        $ContainerName = "conditional-policy-backup-" + (get-date -Format "yyyy-MM-dd")
    }

    #region configuration import
    # "Getting Process configuration - JSON in Az Automation Variable"
    $processConfigRaw = Get-AutomationVariable -name "SettingsExports" -ErrorAction SilentlyContinue
    if (-not $processConfigRaw) {
        ## production default
        $processConfigURL = "https://raw.githubusercontent.com/realmjoin/realmjoin-runbooks/production/setup/defaults/settings-org-policies-export.json"
        $webResult = Invoke-WebRequest -UseBasicParsing -Uri $processConfigURL 
        $processConfigRaw = $webResult.Content        ## staging default
        #$processConfigURL = "https://raw.githubusercontent.com/realmjoin/realmjoin-runbooks/master/setup/defaults/settings-org-policies-export.json"
    }
    # Write-RjRbDebug "Process Config URL is $($processConfigURL)"

    # "Getting Process configuration"
    $processConfig = $processConfigRaw | ConvertFrom-Json

    if (-not $ResourceGroupName) {
        $ResourceGroupName = $processConfig.exportResourceGroupName
    }

    if (-not $StorageAccountName) {
        $StorageAccountName = $processConfig.exportStorAccountName
    }

    if (-not $StorageAccountLocation) {
        $StorageAccountLocation = $processConfig.exportStorAccountLocation
    }

    if (-not $StorageAccountSku) {
        $StorageAccountSku = $processConfig.exportStorAccountSKU
    }
    #endregion

    # Write a JSON file from a Policy / group description object
    function Export-PolicyObjects {
        param (
            [Parameter(Mandatory = $true)]
            [array]$policies
        )

        $policies | ForEach-Object {
            $name = $_.displayName -replace "[$([RegEx]::Escape([string][IO.Path]::GetInvalidFileNameChars()))]+", "_"
            if (-not (Test-Path ($name + ".json"))) {
                $_ | ConvertTo-Json -Depth 6 > ($name + ".json")
            }
            else {
                "Will not overwrite " + ($name + ".json") + ". Skipping."
            }
     
        }

    }

    # fetch the policies
    $pols = Invoke-RjRbRestMethodGraph -Resource "/identity/conditionalAccess/policies"

    # Write policy export as files
    mkdir "CAPols" | Out-Null
    Set-Location -Path "CAPols" | Out-Null
    Export-PolicyObjects -policies $pols
    Set-Location -Path ".."  | Out-Null
    Compress-Archive -Path "CAPols\*" -DestinationPath "$ContainerName.zip" | Out-Null   

    # Make sure storage account exists
    $storAccount = Get-AzStorageAccount -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -ErrorAction SilentlyContinue
    if (-not $storAccount) {
        "Creating Azure Storage Account $($StorageAccountName)"
        $storAccount = New-AzStorageAccount -ResourceGroupName $ResourceGroupName -Name $StorageAccountName -Location $StorageAccountLocation -SkuName $StorageAccountSku 
    }
    
    # Get access to the Storage Account
    $keys = Get-AzStorageAccountKey -ResourceGroupName $ResourceGroupName -Name $StorageAccountName
    $context = New-AzStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $keys[0].Value

    # Make sure, container exists
    $container = Get-AzStorageContainer -Name $ContainerName -Context $context -ErrorAction SilentlyContinue
    if (-not $container) {
        "Creating Azure Storage Account Container $($ContainerName)"
        $container = New-AzStorageContainer -Name $ContainerName -Context $context
        "" 
    }
    
    # Upload

    #$files = Get-ChildItem -Path $path
    #$files | ForEach-Object {
    #    Set-AzStorageBlobContent -File $_.FullName -Container $ContainerName -Blob $_.Name -Context $context -Force | Out-Null
    #}
    
    Set-AzStorageBlobContent -File "$ContainerName.zip" -Container $ContainerName -Blob "$ContainerName.zip" -Context $context -Force | Out-Null
    
    #Create signed (SAS) link
    $EndTime = (Get-Date).AddDays(6)
    $SASLink = New-AzStorageBlobSASToken -Permission "r" -Container $ContainerName -Context $context -Blob "$ContainerName.zip" -FullUri -ExpiryTime $EndTime
    

    "Successfully created Conditional Access Export."
    "Expiry of the Link: $EndTime"
    #$container.CloudBlobContainer.Uri.AbsoluteUri | Out-String
    $SASLink | Out-String 
    
}
catch {
    throw $_
}
finally {
    Disconnect-AzAccount -Confirm:$false | Out-Null
}