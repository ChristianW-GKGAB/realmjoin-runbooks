<#
  .SYNOPSIS
  Exports the current set of Conditional Access policies to an Azure storage account.

  .DESCRIPTION
  Exports the current set of Conditional Access policies to an Azure storage account.

  .PARAMETER ContainerName
  Will be autogenerated if left empty

  .NOTES
  Permissions
   MS Graph (API): 
   - Policy.Read.All
   Azure IaaS: Access to the given Azure Storage Account / Resource Group

  .INPUTS
  RunbookCustomization: {
        "Parameters": {
            "CallerName": {
                "Hide": true
            }
        }
    }

#>

#Requires -Modules @{ModuleName = "RealmJoin.RunbookHelper"; ModuleVersion = "0.6.0" }, Az.Storage

param(
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "CaPoliciesExport.Container" } )]
    [string] $ContainerName,
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "CaPoliciesExport.ResourceGroup" } )]
    [string] $ResourceGroupName,
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "CaPoliciesExport.StorageAccount.Name" } )]
    [string] $StorageAccountName,
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "CaPoliciesExport.StorageAccount.Location" } )]
    [string] $StorageAccountLocation,
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "CaPoliciesExport.StorageAccount.Sku" } )]
    [string] $StorageAccountSku,
    [ValidateScript( { Use-RJInterface -Type Setting -Attribute "SenderMail" } )]
    [string] $From,
    # CallerName is tracked purely for auditing purposes
    [Parameter(Mandatory = $true)]
    [string] $CallerName
)

Connect-RjRbGraph

$dir1 = "$dir\CABackup"
New-Item -Path $dir1 -ItemType Directory -Force -ErrorAction SilentlyContinue
$BackupPath = "$dir1\$date"
If (!(Test-Path $BackupPath))
{
	New-Item -Path $BackupPath -ItemType Directory -Force
}
$Currentdate = (Get-Date).AddDays(-1)
$Modifiedpolicies = "$BackupPath\ChangestoCAPolicies.txt"
$AllPolicies = Invoke-RjRbRestMethodGraph -Resource "/policies/conditionalAccessPolicies"
foreach ($Policy in $AllPolicies)
{
	Write-host "Backing up $($Policy.DisplayName)"
	$Policy | ConvertTo-Json | Out-File "$BackupPath\$($Policy.Id).json"
	$policyModifieddate = nullable[datetime]
	$policyCreationdate = nullable[datetime]
	if (($policyModifieddate -gt $Currentdate) -or ($policyCreationdate -gt $Currentdate))
	{
		#write-host "------There are policies updated in the last 24 hours, please refer txt file." -ForegroundColor Green
		IF (($policyModifieddate))
		{
			"PolicyID:$($policy.ID) & Name:$($policy.DisplayName) & Modified date:$policyModifieddate" | Out-File $Modifiedpolicies -Append
		}
		else
		{
			"PolicyID:$($policy.ID) & Name:$($policy.DisplayName) & Creation date:$policyCreationdate" | Out-File $Modifiedpolicies -Append
		}
	}
}
#send email if any changes to the Conditional Access Policies in the last 24 hours
If ($Null -ne (Get-Content $Modifiedpolicies))
{
	write-host "Found policies" -ForegroundColor Yellow
	Send-MailMessage -From $From -To $To -SmtpServer $smtp -Subject $Subject -Body $Body -Attachments "$Modifiedpolicies"
}